$ ls run_commands_main/
bootstrap  commands_args.txt  rclone.conf  run_commands_main.sh
$ cd run_commands_main/
$ zip -ll ../run_commands_main.zip *
  adding: bootstrap (deflated 43%)
  adding: commands_args.txt (deflated 54%)
  adding: rclone.conf (deflated 42%)
  adding: run_commands_main.sh (deflated 39%)
$ cd ..
$ aws iam create-role --role-name lambda-ex --assume-role-policy-document '{"Version": "2012-10-17","Statement": [{ "Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}'
...
"Arn": "arn:aws:iam::************:role/lambda-ex"
...
$ aws iam attach-role-policy --role-name lambda-ex --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
$ aws lambda create-function --function-name run_commands_main --handler run_commands_main.handler --runtime provided --role arn:aws:iam::************:role/lambda-ex --layers arn:aws:lambda:us-east-2:************:layer:object_storage:** --zip-file fileb://run_commands_main.zip --timeout 57
...
"FunctionArn": "arn:aws:lambda:us-east-2:************:function:run_commands_main"
...
$ aws lambda put-function-event-invoke-config --function-name run_commands_main --maximum-event-age-in-seconds 60 --maximum-retry-attempts 0
$ aws events put-rule --name run_commands_main_schedule --schedule-expression 'cron(* * * * ? *)'
{
    "RuleArn": "arn:aws:events:us-east-2:************:rule/run_commands_main_schedule"
}
$ aws lambda add-permission --function-name run_commands_main --statement-id run_commands_main_schedule --action 'lambda:InvokeFunction' --principal events.amazonaws.com --source-arn arn:aws:events:us-east-2:************:rule/run_commands_main_schedule
$ aws events put-targets --rule run_commands_main_schedule --targets '{"Id": "1", "Arn": "arn:aws:lambda:us-east-2:************:function:run_commands_main"}'
$ aws sns create-topic --name run_commands_main_alert
{
    "TopicArn": "arn:aws:sns:us-east-2:************:run_commands_main_alert"
}
$ aws sns subscribe --topic-arn arn:aws:sns:us-east-2:************:run_commands_main_alert --protocol email --notification-endpoint ******@***.***
$ aws iam put-role-policy --role-name lambda-ex --policy-name run_commands_main_alert --policy-document '{"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": "sns:Publish", "Resource": "arn:aws:sns:us-east-2:************:run_commands_main_alert"}]}'
$ aws lambda update-function-event-invoke-config --function-name run_commands_main --destination-config '{"OnFailure":{"Destination": "arn:aws:sns:us-east-2:************:run_commands_main_alert"}}'


#######################################################################
re-create function
$ aws lambda delete-function --function-name run_commands_main
$ aws lambda create-function --function-name run_commands_main --handler run_commands_main.handler --runtime provided --role arn:aws:iam::************:role/lambda-ex --layers arn:aws:lambda:us-east-2:************:layer:object_storage:** --zip-file fileb://run_commands_main.zip --timeout 57

re-create schedule
$ aws events remove-targets --rule run_commands_main_schedule --ids run_commands_main_schedule
$ aws events put-rule --name run_commands_main_schedule --schedule-expression 'cron(* * * * ? *)'

re-create schedule-function-relation
$ aws lambda add-permission --function-name run_commands_main --statement-id run_commands_main_schedule --action 'lambda:InvokeFunction' --principal events.amazonaws.com --source-arn arn:aws:events:us-east-2:************:rule/run_commands_main_schedule
$ aws events put-targets --rule run_commands_main_schedule --targets '{"Id": "1", "Arn": "arn:aws:lambda:us-east-2:************:function:run_commands_main"}'
